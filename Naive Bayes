import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Cargar el dataset
df = pd.read_csv("Naive-Bayes-Classification-Data.csv")

# Ver las primeras filas del dataset
print(df.head())

# Verificar valores nulos
print("\nValores nulos en el dataset:")
print(df.isnull().sum())

# Eliminar filas con valores nulos si existen
df = df.dropna()

# Dividir en variables de entrada (X) y variable de salida (y)
X = df[['glucose', 'bloodpressure']]
y = df['diabetes']

# Normalizar los valores numéricos
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Separar en conjunto de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear el modelo Naïve Bayes
model = GaussianNB()

# Entrenar el modelo
model.fit(X_train, y_train)

# Hacer predicciones
y_pred = model.predict(X_test)

# Evaluar el modelo
accuracy = accuracy_score(y_test, y_pred)
print(f"Precisión del modelo: {accuracy:.2f}")

# Matriz de confusión
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Greys')
plt.xlabel("Predicción")
plt.ylabel("Real")
plt.title("Matriz de Confusión")
plt.show()

# Reporte de clasificación
print("Reporte de Clasificación:")
print(classification_report(y_test, y_pred))
